# This group member image metadata describes a image which builds on the myutil-base image:
#    *review myutil-base-docker/config.yml  before reading this config.yml*
# How we should find a the Dockerfile in a GitHub repo and build it for an OCP release.

# Information about the dist-git repo
repo:
  type: rpms   # default is "rpms", but can be set to "apbs" for new dist-git repo type
  # Component specifies the Bugzilla components associated with this image. It defaults to
  # the name of the distgit repo.
  ## component: myutil

# The image name the Dockerfile builds. In this example, the image would land
# in registry.access.redhat.com/openshift3/my-util:vX.Y.Z once shipped.
name: openshift3/myutil

# This section defines how the FROM field in the upstream Dockerfile will be set
# before each build.
from:
  # Use "member" if another member of the group defines the base image for this Dockerfile.
  member: myutil-base-docker   # From a member of the group

  # Use stream to indicate one of the streams defined in streams.yml. Generally, this would be
  # "rhel" for OCP images. It is called a "stream" because this is not a fixed version of rhel,
  # but will change to over time as new versions of RHEL are released or CVEs are fixed.
  ## stream: rhel

  # Use "image" if a literal image and tag should be injected into the FROM field of the Dockerile.
  # This is uncommon and oit will not attempt to change the specified literal string to, for example,
  # pick up new CVEs in the base image.
  ## image: namespace/imagename:tag

# rpm group members on which this image is reliant (rpm will always be built before image)
rpms:
  - myutil

# Owners are emailed when the build process notes the upstream Dockerfile has
# changed and needs to be "reconciled" with what is in distgit. Eventually, owners
# may also be notified if their image / RPM is causing the build to fail.
owners:
  - email@redhat.com
  - email2@redhat.com

# Labels that will be set into the Dockerfile. name, version, and release will be set automatically.
# com.redhat.component  will default to the dist-git repo name (openshift-enterprise-node-docker).
labels:
  vendor: Red Hat
  License: GPLv2+
  architecture: "x86_64"
  io.k8s.display-name: "MyUtil Image"
  io.k8s.description: "This is an example image to be managed by OIT."
  io.openshift.tags: "fake,openshift,oit"

# This section describes:
# (1) where to find the upstream Dockerfile for this image.
# (2) Fine-grained changes that need to be made to the upstream Dockerfile in order for it to build for OCP.
content:

  # Where to pull the upstream Dockerfile from. Source locations are defined by an "alias" which is a logical
  # name for a git repository. Source aliases must be defined in group.yml or specified on the command line
  # by the build process. In the following example, oit will use the following file for its upstream source Dockerfile:
  # [cloned ose repo root]/images/node/Dockerfile.rhel7
  source:
    # If the source has an alias defined, an extracted local directory can be specified on the local file system
    # using --source alias path.
    alias: enterprise-images-upstream-example
    path: images/myutil
    # Optionally specify the name of the upstream Dockerfile if it is not the default
    ## dockerfile: Dockerfile.rhel7
